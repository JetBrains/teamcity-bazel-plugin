/*
 * Copyright 2000-2023 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package bazel.v1

import bazel.Converter
import bazel.Event
import bazel.bazel.converters.BazelEventConverter
import bazel.events.OrderedBuildEvent
import bazel.events.StreamId
import bazel.events.Timestamp
import bazel.events.UnknownEvent
import bazel.v1.converters.BuildStatusConverter
import bazel.v1.converters.ConsoleOutputStreamConverter
import bazel.v1.converters.FinishTypeConverter
import bazel.v1.handlers.*
import java.util.logging.Level
import java.util.logging.Logger

class BuildEventConverter(
        private val _streamIdConverter: Converter<com.google.devtools.build.v1.StreamId, StreamId>)
    : Converter<Event<com.google.devtools.build.v1.OrderedBuildEvent>, Event<OrderedBuildEvent>> {
    override fun convert(source: Event<com.google.devtools.build.v1.OrderedBuildEvent>): Event<OrderedBuildEvent> {
        val payload = source.payload
        val streamId = if (payload.hasStreamId()) _streamIdConverter.convert(payload.streamId) else StreamId.default
        if (payload.hasEvent()) {
            val event = payload.event
            val sequenceNumber = payload.sequenceNumber
            val eventTime = Timestamp(event.eventTime.seconds, event.eventTime.nanos)
            val handlersIterator = handlers.iterator()
            val convertedPayload = handlersIterator.next().handle(HandlerContext(handlersIterator, streamId, sequenceNumber, eventTime, event))
            return Event(source.projectId, convertedPayload)
        }

        logger.log(Level.SEVERE, "Unknown event: $source")
        return Event(source.projectId, UnknownEvent(streamId))
    }

    companion object {
        private val logger = Logger.getLogger(BuildEventConverter::class.java.name)
        private val handlers = sequenceOf(
                // An invocation attempt has started.
                // invocation_attempt_started = 51
                InvocationAttemptStartedHandler(),

                // An invocation attempt has finished.
                // invocation_attempt_finished = 52
                InvocationAttemptFinishedHandler(BuildStatusConverter()),

                // The build is enqueued (just inserted to the build queue or put back
                // into the build queue due to a previous build failure).
                // build_enqueued = 53
                BuildEnqueuedHandler(),

                // The build has finished. Set when the build is terminated.
                // build_finished = 55
                BuildFinishedHandler(BuildStatusConverter()),

                // An event containing printed text.
                // console_output = 56
                ConsoleOutputHandler(ConsoleOutputStreamConverter()),

                // Indicates the end of a build event stream (with the same StreamId) from
                // a build component executing the requested build task.
                // *** This field does not indicate the WatchBuild RPC is finished. ***
                // component_stream_finished = 59
                ComponentStreamFinishedHandler(FinishTypeConverter()),

                // Structured build event generated by Bazel about its execution progress.
                // bazel_event = 60
                BazelEventHandler(BazelEventConverter()),

                // An event that contains supplemental tool-specific information about
                // build execution.
                // build_execution_event = 61

                // An event that contains supplemental tool-specific information about
                // source fetching.
                // source_fetch_event = 62

                // Unknown event.
                UnknownEventHandler()
        ).sortedBy { it.priority }.toList()
    }
}