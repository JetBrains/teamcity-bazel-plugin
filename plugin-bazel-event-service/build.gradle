

buildscript {
    ext.kotlin_version = '1.9.22'

    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.19'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.google.protobuf'
apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://download.jetbrains.com/teamcity-repository/" }
}

dependencies {
    implementation project(':rx')
    implementation libs.commons.cli
    implementation libs.kotlin.stdlib
    implementation libs.grpc.proto
    implementation libs.grpc.netty
    implementation libs.grpc.protobuf
    implementation libs.grpc.stub
    implementation libs.javax.annotation.api
    implementation "org.jetbrains.teamcity:serviceMessages:${teamcityVersion}"
    implementation libs.log4j.api
    implementation libs.log4j.core
    testImplementation libs.grpc.testing
    testImplementation libs.mockk
    testImplementation libs.testng
    testImplementation libs.jmock

}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto/**'
        }
    }
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.25.2' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:1.60.1" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

jar {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest {
        attributes 'Main-Class': 'bazel.MainKt',
        'Class-Path': configurations.runtimeClasspath.files.collect{ it.name }.join(' ')
    }
}

task copyToTools(type: Copy) {
    into "./build/tools"
    from configurations.runtimeClasspath
}

build.dependsOn(copyToTools)

// mark the generated source as such for IntelliJ IDEA
def generatedSrc = file("build/generated/source/proto/main")
sourceSets.main.java.srcDirs += generatedSrc
idea {
    module {
        generatedSourceDirs += generatedSrc
    }
}