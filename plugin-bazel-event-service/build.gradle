plugins {
    id 'java'
    id 'idea'
    alias libs.plugins.protobuf
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://download.jetbrains.com/teamcity-repository/" }
}

dependencies {
    implementation libs.commons.cli
    implementation libs.kotlin.stdlib
    implementation libs.grpc.proto
    implementation libs.grpc.netty
    implementation libs.grpc.protobuf
    implementation libs.grpc.stub
    implementation libs.javax.annotation.api
    implementation libs.teamcity.service.messages
    testImplementation libs.mockk
    testImplementation libs.testng

}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto/**'
        }
    }
}

protobuf {
    protoc { artifact = libs.protobuf.protoc.get().toString() }
    plugins { grpc { artifact = libs.grpc.protoc.gen.java.get().toString() } }
    generateProtoTasks { all()*.plugins { grpc {} } }
}

jar {
    // don't include jar version into the name
    archiveFileName = "plugin-bazel-event-service.jar"
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest {
        attributes 'Main-Class': 'bazel.MainKt',
                'Class-Path': configurations.runtimeClasspath.files.collect { it.name }.join(' ')
    }
}

task copyToTools(type: Copy) {
    into "./build/tools"
    from configurations.runtimeClasspath
}

assemble.dependsOn(copyToTools)

// mark the generated source as such for IntelliJ IDEA
def generatedSrc = file("build/generated/source/proto/main")
sourceSets.main.java.srcDirs += generatedSrc
idea {
    module {
        generatedSourceDirs += generatedSrc
    }
}
