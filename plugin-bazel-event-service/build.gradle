/*
 * Copyright 2000-2023 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    ext.kotlin_version = '1.3.72'

    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'com.google.protobuf'
apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://download.jetbrains.com/teamcity-repository/" }
}

// IMPORTANT: You probably want the non-SNAPSHOT version of gRPC. Make sure you
// are looking at a tagged version of the example and not "master"!

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.18.0' // CURRENT_GRPC_VERSION

dependencies {
    compile project(':rx')
    compile "commons-cli:commons-cli:1.4"
    compile "org.jetbrains.kotlin:kotlin-stdlib"
    compile "com.google.api.grpc:proto-google-common-protos:1.17.0"
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "org.jetbrains.teamcity:common-api:${teamcityVersion}"
    compile "org.jetbrains.teamcity:serviceMessages:${teamcityVersion}"
    testCompile "io.grpc:grpc-testing:${grpcVersion}" // gRCP testing utilities
    testCompile 'io.mockk:mockk:1.9.3'
    testCompile 'org.testng:testng:6.8'
    testCompile 'org.jmock:jmock:2.5.1'
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/proto/**'
        }
    }
}

protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:3.6.1' }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

jar {
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest {
        attributes 'Main-Class': 'bazel.MainKt',
        'Class-Path': configurations.runtime.files.collect{ it.name }.join(' ')
    }
}

task copyToTools(type: Copy) {
    into "./build/tools"
    from configurations.runtime
}

build.dependsOn(copyToTools)

// mark the generated source as such for IntelliJ IDEA
def generatedSrc = file("build/generated/source/proto/main")
sourceSets.main.java.srcDirs += generatedSrc
idea {
    module {
        generatedSourceDirs += generatedSrc
    }
}