plugins {
  alias libs.plugins.teamcity.agent
}

teamcity {
  version = teamcityVersion
  agent {
    descriptor {
      pluginDeployment {
        useSeparateClassloader = true
      }
    }
    files {
      into('tools') {
        from('./../plugin-bazel-event-service/build/libs')
        from('./../plugin-bazel-event-service/build/tools')
      }
    }
  }
}

dependencies {
  implementation project(':plugin-bazel-common')
  implementation project(':rx')
  implementation libs.kotlin.stdlib
  implementation libs.kotlin.reflect
  implementation libs.java.semver
  implementation libs.jackson.module.kotlin
  compileOnly "org.jetbrains.teamcity.internal:agent:${teamcityVersion}"
  compileOnly "org.jetbrains.teamcity:common-api:${teamcityVersion}"
  testImplementation "org.jetbrains.teamcity.internal:agent:${teamcityVersion}"
  testImplementation "org.jetbrains.teamcity:common-api:${teamcityVersion}"
  testImplementation project(':plugin-bazel-event-service')
  testImplementation libs.testng
  testImplementation libs.jmock
  testImplementation libs.mockk
}

agentPlugin.archiveVersion = null
agentPlugin.archiveBaseName = 'teamcity-bazel-agent'

agentPlugin.dependsOn(project(':plugin-bazel-event-service').tasks.build)