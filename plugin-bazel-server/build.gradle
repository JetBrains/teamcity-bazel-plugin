plugins {
    alias libs.plugins.teamcity.server
    alias libs.plugins.changelog
}

changelog {
    path = file("../CHANGELOG.md").canonicalPath
    groups = ["Added", "Changed", "Fixed"]
}

teamcity {
    version = libs.versions.teamcity.get()

    server {
        descriptor {
            name = "bazel"
            displayName = "Bazel build support"
            description = "Provides build facilities for bazel projects"
            downloadUrl = "https://github.com/JetBrains/teamcity-bazel-plugin"
            version = project.version.toString()
            vendorName = "JetBrains"
            vendorUrl = "https://www.jetbrains.com/"
            useSeparateClassloader = true
            allowRuntimeReload = true
            minimumBuild = "40000"
        }

        files {
            into('kotlin-dsl') {
                from("${rootProject.projectDir}/kotlin-dsl")
            }
        }

        publish {
            token = project.findProperty("jetbrains.marketplace.token")
            notes = changelog.renderItem(changelog.getLatest(), Changelog.OutputType.HTML)
        }

        archiveName = 'teamcity-bazel-plugin'
    }
}

dependencies {
    implementation project(':plugin-bazel-common')
    implementation (project(':bazel-build')) {
        exclude group: 'com.ibm.icu'
    }
    implementation libs.kotlin.stdlibjdk8
    compileOnly libs.jstl
    compileOnly libs.teamcity.internal.server
    agent project(path: ':plugin-bazel-agent', configuration: 'plugin')

    constraints {
        implementation(libs.constraint.transitive.icu4j) {
            because 'previous versions have faulty jar files which cause problems during incremental compilation (which is enabled by default since Kotlin 1.8.20)'
        }
    }
}

jar {
    // don't include jar version into the name
    archiveFileName = "plugin-bazel-server.jar"
}

tasks.register("getLatestChangelogVersion") {
    print(changelog.getLatest().version)
}

